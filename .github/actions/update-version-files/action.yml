name: 'Update Version Files'
description: 'Updates both package.json and version.go with new version'
inputs:
  new-version:
    description: 'New version to set'
    required: true
  dry-run:
    description: 'Only show what would be changed without modifying files'
    required: false
    default: 'false'
outputs:
  files-updated:
    description: 'Whether files were actually updated'
    value: ${{ steps.update.outputs.files-updated }}
  package-updated:
    description: 'Whether package.json was updated'
    value: ${{ steps.update.outputs.package-updated }}
  go-updated:
    description: 'Whether version.go was updated'
    value: ${{ steps.update.outputs.go-updated }}

runs:
  using: 'composite'
  steps:
    - name: Update version files
      id: update
      shell: bash
      run: |
        NEW_VERSION="${{ inputs.new-version }}"
        DRY_RUN="${{ inputs.dry-run }}"
        
        echo "🎯 Target version: $NEW_VERSION"
        
        # Validate semantic version format
        if [[ ! $NEW_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "❌ Invalid semantic version format: $NEW_VERSION"
          exit 1
        fi
        
        if [[ "$DRY_RUN" == "true" ]]; then
          echo "🔍 DRY RUN - Would update:"
          echo "  📦 package.json: $(jq -r '.version' package.json) → $NEW_VERSION"
          echo "  🔧 version.go: $(grep 'UIVersion.*=' server/server/version/version.go | sed 's/.*"\(.*\)".*/\1/') → $NEW_VERSION"
          echo "files-updated=false" >> $GITHUB_OUTPUT
          echo "package-updated=false" >> $GITHUB_OUTPUT
          echo "go-updated=false" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # Update package.json
        echo "📦 Updating package.json..."
        ORIGINAL_PACKAGE_VERSION=$(jq -r '.version' package.json)
        jq ".version = \"$NEW_VERSION\"" package.json > tmp.json && mv tmp.json package.json
        UPDATED_PACKAGE_VERSION=$(jq -r '.version' package.json)
        
        if [[ "$UPDATED_PACKAGE_VERSION" == "$NEW_VERSION" ]]; then
          echo "✅ package.json updated: $ORIGINAL_PACKAGE_VERSION → $NEW_VERSION"
          echo "package-updated=true" >> $GITHUB_OUTPUT
        else
          echo "❌ Failed to update package.json"
          echo "package-updated=false" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        # Update version.go
        echo "🔧 Updating version.go..."
        ORIGINAL_GO_VERSION=$(grep 'UIVersion.*=' server/server/version/version.go | sed 's/.*"\(.*\)".*/\1/')
        sed -i "s/UIVersion.*=.*\".*\"/UIVersion               = \"$NEW_VERSION\"/" server/server/version/version.go
        UPDATED_GO_VERSION=$(grep 'UIVersion.*=' server/server/version/version.go | sed 's/.*"\(.*\)".*/\1/')
        
        if [[ "$UPDATED_GO_VERSION" == "$NEW_VERSION" ]]; then
          echo "✅ version.go updated: $ORIGINAL_GO_VERSION → $NEW_VERSION"
          echo "go-updated=true" >> $GITHUB_OUTPUT
        else
          echo "❌ Failed to update version.go"
          echo "go-updated=false" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        # Verify both files now match
        FINAL_PACKAGE_VERSION=$(jq -r '.version' package.json)
        FINAL_GO_VERSION=$(grep 'UIVersion.*=' server/server/version/version.go | sed 's/.*"\(.*\)".*/\1/')
        
        if [[ "$FINAL_PACKAGE_VERSION" == "$FINAL_GO_VERSION" ]] && [[ "$FINAL_PACKAGE_VERSION" == "$NEW_VERSION" ]]; then
          echo "✅ Both files successfully updated and in sync: $NEW_VERSION"
          echo "files-updated=true" >> $GITHUB_OUTPUT
        else
          echo "❌ Files are not in sync after update"
          echo "  package.json: $FINAL_PACKAGE_VERSION"
          echo "  version.go: $FINAL_GO_VERSION"
          echo "files-updated=false" >> $GITHUB_OUTPUT
          exit 1
        fi