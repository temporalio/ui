name: 'Calculate Version Bump'
description: 'Calculates new semantic version based on bump type'
inputs:
  current-version:
    description: 'Current semantic version'
    required: true
  bump-type:
    description: 'Type of version bump (major, minor, patch)'
    required: false
  specific-version:
    description: 'Specific version to set (overrides bump-type)'
    required: false
  mode:
    description: 'Bump mode for context (auto, manual, dry-run)'
    required: false
    default: 'auto'
outputs:
  new-version:
    description: 'Calculated new version'
    value: ${{ steps.calculate.outputs.new-version }}
  version-changed:
    description: 'Whether version will change'
    value: ${{ steps.calculate.outputs.version-changed }}
  major:
    description: 'Major version number'
    value: ${{ steps.parse.outputs.major }}
  minor:
    description: 'Minor version number'
    value: ${{ steps.parse.outputs.minor }}
  patch:
    description: 'Patch version number'
    value: ${{ steps.parse.outputs.patch }}

runs:
  using: 'composite'
  steps:
    - name: Parse current version
      id: parse
      shell: bash
      run: |
        CURRENT_VERSION="${{ inputs.current-version }}"

        echo "🔍 Parsing version: $CURRENT_VERSION"

        # Validate semantic version format
        if [[ ! $CURRENT_VERSION =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
          echo "❌ Invalid semantic version format: $CURRENT_VERSION"
          echo "Expected format: x.y.z (e.g., 1.2.3)"
          exit 1
        fi

        MAJOR=${BASH_REMATCH[1]}
        MINOR=${BASH_REMATCH[2]}
        PATCH=${BASH_REMATCH[3]}

        echo "major=$MAJOR" >> $GITHUB_OUTPUT
        echo "minor=$MINOR" >> $GITHUB_OUTPUT
        echo "patch=$PATCH" >> $GITHUB_OUTPUT

        echo "📊 Current: $MAJOR.$MINOR.$PATCH"

    - name: Calculate new version
      id: calculate
      shell: bash
      run: |
        CURRENT_VERSION="${{ inputs.current-version }}"
        SPECIFIC_VERSION="${{ inputs.specific-version }}"
        BUMP_TYPE="${{ inputs.bump-type }}"
        MAJOR="${{ steps.parse.outputs.major }}"
        MINOR="${{ steps.parse.outputs.minor }}"
        PATCH="${{ steps.parse.outputs.patch }}"

        # Check if specific version was provided
        if [[ -n "$SPECIFIC_VERSION" ]]; then
          echo "🎯 Using specific version: $SPECIFIC_VERSION"
          
          # Validate specific version format
          if [[ ! $SPECIFIC_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid specific version format: $SPECIFIC_VERSION"
            echo "Expected format: x.y.z (e.g., 2.38.0)"
            exit 1
          fi
          
          NEW_VERSION="$SPECIFIC_VERSION"
          
          # Compare with current version
          if [[ "$NEW_VERSION" == "$CURRENT_VERSION" ]]; then
            echo "⚠️ Specific version same as current: $NEW_VERSION"
          elif [[ "$(printf '%s\n' "$CURRENT_VERSION" "$NEW_VERSION" | sort -V | head -n1)" == "$NEW_VERSION" ]]; then
            echo "⚠️ Specific version ($NEW_VERSION) is older than current ($CURRENT_VERSION)"
            echo "💡 Consider using a higher version number"
          else
            echo "✅ Specific version is newer than current"
          fi
        else
          echo "🎯 Bump type: $BUMP_TYPE"
          
          # Calculate new version based on bump type
          case $BUMP_TYPE in
            major)
              NEW_VERSION="$((MAJOR + 1)).0.0"
              echo "📈 Major bump: $CURRENT_VERSION → $NEW_VERSION"
              ;;
            minor)
              NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
              echo "📈 Minor bump: $CURRENT_VERSION → $NEW_VERSION"
              ;;
            patch)
              NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
              echo "📈 Patch bump: $CURRENT_VERSION → $NEW_VERSION"
              ;;
            *)
              echo "❌ Invalid bump type: $BUMP_TYPE"
              echo "Valid types: major, minor, patch"
              exit 1
              ;;
          esac
        fi

        # Check if version actually changed
        if [[ "$CURRENT_VERSION" != "$NEW_VERSION" ]]; then
          VERSION_CHANGED="true"
          echo "✅ Version will change: $CURRENT_VERSION → $NEW_VERSION"
        else
          VERSION_CHANGED="false" 
          echo "ℹ️ No version change (already at $CURRENT_VERSION)"
        fi

        echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "version-changed=$VERSION_CHANGED" >> $GITHUB_OUTPUT
