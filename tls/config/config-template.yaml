log:
  stdout: true
  level: info

persistence:
  numHistoryShards: 4
  defaultStore: default
  visibilityStore: visibility
  datastores:
    default:
      sql:
        pluginName: "postgres12"
        databaseName: "temporal"
        connectAddr: "postgresql:5432"
        connectProtocol: "tcp"
        user: "temporal"
        password: "temporal"
        maxConns: 20
        maxIdleConns: 20
        maxConnLifetime: 1h
        tls:
          enabled: false
          caFile:
          certFile:
          keyFile:
          enableHostVerification: false
          serverName:
    visibility:
      sql:
        pluginName: "postgres12"
        databaseName: "temporal_visibility"
        connectAddr: "postgresql:5432"
        connectProtocol: "tcp"
        user: "temporal"
        password: "temporal"
        maxConns: 10
        maxIdleConns: 10
        maxConnLifetime: 1h
        tls:
          enabled: false
          caFile:
          certFile:
          keyFile:
          enableHostVerification: false
          serverName:

global:
  membership:
    maxJoinDuration: 30s
    broadcastAddress: ""
  pprof:
    port: 0
  tls:
    refreshInterval: 0s
    expirationChecks:
      warningWindow: 0s
      errorWindow: 0s
      checkInterval: 0s
    internode:
      # This server section configures the TLS certificate that internal temporal
      # cluster nodes (history, matching, and internal-frontend) present to other
      # clients within the Temporal Cluster.
      server:
        requireClientAuth: true
        certFile: /etc/temporal/certs/server.crt
        keyFile: /etc/temporal/certs/server.key
        clientCaFiles:
          - /etc/temporal/certs/ca.crt

      # This client section is used to configure the TLS clients within
      # the Temporal Cluster that connect to an Internode (history, matching, or
      # internal-frontend)
      client:
        serverName: temporal-server
        rootCaFiles:
          - /etc/temporal/certs/ca.crt
    frontend:
      # This server section configures the TLS certificate that the Frontend
      # server presents to external clients.
      server:
        requireClientAuth: true # Mutual TLS
        certFile: /etc/temporal/certs/server.crt
        keyFile: /etc/temporal/certs/server.key
        clientCaFiles:
          - /etc/temporal/certs/ca.crt

      # This client section is used to configure the TLS clients within
      # the Temporal Cluster (specifically the Worker role) that connect to the Frontend service
      client:
        serverName: temporal-server
        rootCaFiles:
          - /etc/temporal/certs/ca.crt

services:
  frontend:
    rpc:
      grpcPort: 7233
      membershipPort: 6933
      bindOnLocalHost: false
      httpPort: 7243
      # Enable TLS
      tls:
        certFile: /etc/temporal/certs/server.crt
        keyFile: /etc/temporal/certs/server.key
        clientCaFiles:
          - /etc/temporal/certs/ca.crt
        requireClientAuth: true

  matching:
    rpc:
      grpcPort: 7235
      membershipPort: 6935
      bindOnLocalHost: false
      tls:
        certFile: /etc/temporal/certs/server.crt
        keyFile: /etc/temporal/certs/server.key
        clientCaFiles:
          - /etc/temporal/certs/ca.crt
        requireClientAuth: true
  history:
    rpc:
      grpcPort: 7234
      membershipPort: 6934
      bindOnLocalHost: false
      tls:
        certFile: /etc/temporal/certs/server.crt
        keyFile: /etc/temporal/certs/server.key
        clientCaFiles:
          - /etc/temporal/certs/ca.crt
        requireClientAuth: true
  worker:
    rpc:
      grpcPort: 7239
      membershipPort: 6939
      bindOnLocalHost: false
      tls:
        certFile: /etc/temporal/certs/server.crt
        keyFile: /etc/temporal/certs/server.key
        clientCaFiles:
          - /etc/temporal/certs/ca.crt
        requireClientAuth: true
clusterMetadata:
  enableGlobalNamespace: false
  failoverVersionIncrement: 10
  masterClusterName: "active"
  currentClusterName: "active"
  clusterInformation:
    active:
      enabled: true
      initialFailoverVersion: 1
      rpcName: "frontend"
      rpcAddress: "127.0.0.1:7233"

dcRedirectionPolicy:
  policy: "noop"

archival:
  history:
    state: "enabled"
    enableRead: true
    provider:
      filestore:
        fileMode: "0666"
        dirMode: "0766"
  visibility:
    state: "enabled"
    enableRead: true
    provider:
      filestore:
        fileMode: "0666"
        dirMode: "0766"

namespaceDefaults:
  archival:
    history:
      state: "disabled"
      URI: "file:///tmp/temporal_archival/development"
    visibility:
      state: "disabled"
      URI: "file:///tmp/temporal_vis_archival/development"

dynamicConfigClient:
  filepath: "/etc/temporal/config/dynamicconfig/docker.yaml"
  pollInterval: "60s"
