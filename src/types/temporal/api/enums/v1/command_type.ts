/* eslint-disable */
import Long from 'long';
import _m0 from 'protobufjs/minimal';

export const protobufPackage = 'temporal.api.enums.v1';

/** Whenever this list of command types is changed do change the function shouldBufferEvent in mutableStateBuilder.go to make sure to do the correct event ordering. */
export enum CommandType {
  COMMAND_TYPE_UNSPECIFIED = 0,
  COMMAND_TYPE_SCHEDULE_ACTIVITY_TASK = 1,
  COMMAND_TYPE_REQUEST_CANCEL_ACTIVITY_TASK = 2,
  COMMAND_TYPE_START_TIMER = 3,
  COMMAND_TYPE_COMPLETE_WORKFLOW_EXECUTION = 4,
  COMMAND_TYPE_FAIL_WORKFLOW_EXECUTION = 5,
  COMMAND_TYPE_CANCEL_TIMER = 6,
  COMMAND_TYPE_CANCEL_WORKFLOW_EXECUTION = 7,
  COMMAND_TYPE_REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION = 8,
  COMMAND_TYPE_RECORD_MARKER = 9,
  COMMAND_TYPE_CONTINUE_AS_NEW_WORKFLOW_EXECUTION = 10,
  COMMAND_TYPE_START_CHILD_WORKFLOW_EXECUTION = 11,
  COMMAND_TYPE_SIGNAL_EXTERNAL_WORKFLOW_EXECUTION = 12,
  COMMAND_TYPE_UPSERT_WORKFLOW_SEARCH_ATTRIBUTES = 13,
  UNRECOGNIZED = -1,
}

export function commandTypeFromJSON(object: any): CommandType {
  switch (object) {
    case 0:
    case 'COMMAND_TYPE_UNSPECIFIED':
      return CommandType.COMMAND_TYPE_UNSPECIFIED;
    case 1:
    case 'COMMAND_TYPE_SCHEDULE_ACTIVITY_TASK':
      return CommandType.COMMAND_TYPE_SCHEDULE_ACTIVITY_TASK;
    case 2:
    case 'COMMAND_TYPE_REQUEST_CANCEL_ACTIVITY_TASK':
      return CommandType.COMMAND_TYPE_REQUEST_CANCEL_ACTIVITY_TASK;
    case 3:
    case 'COMMAND_TYPE_START_TIMER':
      return CommandType.COMMAND_TYPE_START_TIMER;
    case 4:
    case 'COMMAND_TYPE_COMPLETE_WORKFLOW_EXECUTION':
      return CommandType.COMMAND_TYPE_COMPLETE_WORKFLOW_EXECUTION;
    case 5:
    case 'COMMAND_TYPE_FAIL_WORKFLOW_EXECUTION':
      return CommandType.COMMAND_TYPE_FAIL_WORKFLOW_EXECUTION;
    case 6:
    case 'COMMAND_TYPE_CANCEL_TIMER':
      return CommandType.COMMAND_TYPE_CANCEL_TIMER;
    case 7:
    case 'COMMAND_TYPE_CANCEL_WORKFLOW_EXECUTION':
      return CommandType.COMMAND_TYPE_CANCEL_WORKFLOW_EXECUTION;
    case 8:
    case 'COMMAND_TYPE_REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION':
      return CommandType.COMMAND_TYPE_REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION;
    case 9:
    case 'COMMAND_TYPE_RECORD_MARKER':
      return CommandType.COMMAND_TYPE_RECORD_MARKER;
    case 10:
    case 'COMMAND_TYPE_CONTINUE_AS_NEW_WORKFLOW_EXECUTION':
      return CommandType.COMMAND_TYPE_CONTINUE_AS_NEW_WORKFLOW_EXECUTION;
    case 11:
    case 'COMMAND_TYPE_START_CHILD_WORKFLOW_EXECUTION':
      return CommandType.COMMAND_TYPE_START_CHILD_WORKFLOW_EXECUTION;
    case 12:
    case 'COMMAND_TYPE_SIGNAL_EXTERNAL_WORKFLOW_EXECUTION':
      return CommandType.COMMAND_TYPE_SIGNAL_EXTERNAL_WORKFLOW_EXECUTION;
    case 13:
    case 'COMMAND_TYPE_UPSERT_WORKFLOW_SEARCH_ATTRIBUTES':
      return CommandType.COMMAND_TYPE_UPSERT_WORKFLOW_SEARCH_ATTRIBUTES;
    case -1:
    case 'UNRECOGNIZED':
    default:
      return CommandType.UNRECOGNIZED;
  }
}

export function commandTypeToJSON(object: CommandType): string {
  switch (object) {
    case CommandType.COMMAND_TYPE_UNSPECIFIED:
      return 'COMMAND_TYPE_UNSPECIFIED';
    case CommandType.COMMAND_TYPE_SCHEDULE_ACTIVITY_TASK:
      return 'COMMAND_TYPE_SCHEDULE_ACTIVITY_TASK';
    case CommandType.COMMAND_TYPE_REQUEST_CANCEL_ACTIVITY_TASK:
      return 'COMMAND_TYPE_REQUEST_CANCEL_ACTIVITY_TASK';
    case CommandType.COMMAND_TYPE_START_TIMER:
      return 'COMMAND_TYPE_START_TIMER';
    case CommandType.COMMAND_TYPE_COMPLETE_WORKFLOW_EXECUTION:
      return 'COMMAND_TYPE_COMPLETE_WORKFLOW_EXECUTION';
    case CommandType.COMMAND_TYPE_FAIL_WORKFLOW_EXECUTION:
      return 'COMMAND_TYPE_FAIL_WORKFLOW_EXECUTION';
    case CommandType.COMMAND_TYPE_CANCEL_TIMER:
      return 'COMMAND_TYPE_CANCEL_TIMER';
    case CommandType.COMMAND_TYPE_CANCEL_WORKFLOW_EXECUTION:
      return 'COMMAND_TYPE_CANCEL_WORKFLOW_EXECUTION';
    case CommandType.COMMAND_TYPE_REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION:
      return 'COMMAND_TYPE_REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION';
    case CommandType.COMMAND_TYPE_RECORD_MARKER:
      return 'COMMAND_TYPE_RECORD_MARKER';
    case CommandType.COMMAND_TYPE_CONTINUE_AS_NEW_WORKFLOW_EXECUTION:
      return 'COMMAND_TYPE_CONTINUE_AS_NEW_WORKFLOW_EXECUTION';
    case CommandType.COMMAND_TYPE_START_CHILD_WORKFLOW_EXECUTION:
      return 'COMMAND_TYPE_START_CHILD_WORKFLOW_EXECUTION';
    case CommandType.COMMAND_TYPE_SIGNAL_EXTERNAL_WORKFLOW_EXECUTION:
      return 'COMMAND_TYPE_SIGNAL_EXTERNAL_WORKFLOW_EXECUTION';
    case CommandType.COMMAND_TYPE_UPSERT_WORKFLOW_SEARCH_ATTRIBUTES:
      return 'COMMAND_TYPE_UPSERT_WORKFLOW_SEARCH_ATTRIBUTES';
    default:
      return 'UNKNOWN';
  }
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}
