import { z } from 'zod';

/**Event marking that an operation was scheduled by a workflow via the ScheduleNexusOperation command.*/
export const NexusOperationScheduledEventAttributes = z
  .object({
    /**Endpoint name, must exist in the endpoint registry.*/
    endpoint: z
      .string()
      .describe('Endpoint name, must exist in the endpoint registry.')
      .optional(),
    /**Service name.*/
    service: z.string().describe('Service name.').optional(),
    /**Operation name.*/
    operation: z.string().describe('Operation name.').optional(),
    /**
     * Input for the operation. The server converts this into Nexus request content and the appropriate content headers
     *  internally when sending the StartOperation request. On the handler side, if it is also backed by Temporal, the
     *  content is transformed back to the original Payload stored in this event.
     */
    input: z
      .any()
      .describe(
        'Input for the operation. The server converts this into Nexus request content and the appropriate content headers\n internally when sending the StartOperation request. On the handler side, if it is also backed by Temporal, the\n content is transformed back to the original Payload stored in this event.',
      )
      .optional(),
    /**
     * Schedule-to-close timeout for this operation.
     *  Indicates how long the caller is willing to wait for operation completion.
     *  Calls are retried internally by the server.
     *  (-- api-linter: core::0140::prepositions=disabled
     *      aip.dev/not-precedent: "to" is used to indicate interval. --)
     */
    scheduleToCloseTimeout: z
      .string()
      .regex(new RegExp('^-?(?:0|[1-9][0-9]{0,11})(?:\\.[0-9]{1,9})?s$'))
      .describe(
        'Schedule-to-close timeout for this operation.\n Indicates how long the caller is willing to wait for operation completion.\n Calls are retried internally by the server.\n (-- api-linter: core::0140::prepositions=disabled\n     aip.dev/not-precedent: "to" is used to indicate interval. --)',
      )
      .optional(),
    /**
     * Header to attach to the Nexus request. Note these headers are not the same as Temporal headers on internal
     *  activities and child workflows, these are transmitted to Nexus operations that may be external and are not
     *  traditional payloads.
     */
    nexusHeader: z
      .record(z.string())
      .describe(
        'Header to attach to the Nexus request. Note these headers are not the same as Temporal headers on internal\n activities and child workflows, these are transmitted to Nexus operations that may be external and are not\n traditional payloads.',
      )
      .optional(),
    /**The `WORKFLOW_TASK_COMPLETED` event that the corresponding ScheduleNexusOperation command was reported with.*/
    workflowTaskCompletedEventId: z
      .string()
      .describe(
        'The `WORKFLOW_TASK_COMPLETED` event that the corresponding ScheduleNexusOperation command was reported with.',
      )
      .optional(),
    /**
     * A unique ID generated by the history service upon creation of this event.
     *  The ID will be transmitted with all nexus StartOperation requests and is used as an idempotentency key.
     */
    requestId: z
      .string()
      .describe(
        'A unique ID generated by the history service upon creation of this event.\n The ID will be transmitted with all nexus StartOperation requests and is used as an idempotentency key.',
      )
      .optional(),
    /**
     * Endpoint ID as resolved in the endpoint registry at the time this event was generated.
     *  This is stored on the event and used internally by the server in case the endpoint is renamed from the time the
     *  event was originally scheduled.
     */
    endpointId: z
      .string()
      .describe(
        'Endpoint ID as resolved in the endpoint registry at the time this event was generated.\n This is stored on the event and used internally by the server in case the endpoint is renamed from the time the\n event was originally scheduled.',
      )
      .optional(),
  })
  .describe(
    'Event marking that an operation was scheduled by a workflow via the ScheduleNexusOperation command.',
  );
export type NexusOperationScheduledEventAttributes = z.infer<
  typeof NexusOperationScheduledEventAttributes
>;
